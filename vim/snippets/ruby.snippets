snippet #!
	#!/usr/bin/env ruby${1}

snippet r
	require '${1}'${2}

snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end

snippet when
	when ${1:condition}
		${2}

snippet def
	def ${1:method_name}
		${2}
	end

snippet if
	if ${1:condition}
		${2}
	end

snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end

snippet elsif
	elsif ${1:condition}
		${2}

snippet unless
	unless ${1:condition}
		${2}
	end

snippet while
	while ${1:condition}
		${2}
	end

snippet until
	until ${1:condition}
		${2}
	end

snippet init
	def initialize(${1:args})
		${2}
	end

snippet class
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
	end
snippet <<
	class << ${1:self}
		${2}
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end

snippet ar
	attr_reader :${1:attr_names}
snippet aw
	attr_writer :${1:attr_names}
snippet aa
	attr_accessor :${1:attr_names}

snippet method_missing
	def method_missing(meth, *args, &blk)
		${1}
	end

snippet delegator
	def_delegator ${1:@target_obj}, :${2:delegate_mtd}, :${3:new_mtd_name}
snippet delegators
	def_delegators ${1:@target_obj}, :${2:delegate_mtds}
snippet alias
	alias_method :${1:new_name}, :${2:old_name}

snippet file File.open()
	File.open(${1:'path/to/file'}) do |f|
		${2}
	end
snippet file File.foreach() { |line| .. }
	File.foreach(${1:'path/to/file'}) do |line|
		${2}
	end

snippet dir
	File.dirname(${1:__FILE__})${2}

snippet task
	desc '${1:Task description}'
	task :${2:task_name => [:dependent, :tasks]} do
		${3}
	end${4}

# my sinppets
snippet :
	:${1:key} => ${2:'value'}${3}
snippet f
	flash[:${1:notice}]${2}
snippet p
	params[:${1:id}]${2}
snippet B
	{ |${1:args}| ${2} }
snippet do
	do |${1:args}|
		${2}
	end
snippet each
	each { |${1:e}| ${2} }
snippet eacH
	each do |${1:e}|
		${2}
	end
snippet map
	map { |${1:e}| ${2} }
snippet maP
	map do |${1:e}|
		${2}
	end
snippet inject
	reduce(${1:init}) { |${2:r, e}| ${3} }
snippet injecT
	reduce(${1:init}) do |${2:r, e}|
		${3}
	end
